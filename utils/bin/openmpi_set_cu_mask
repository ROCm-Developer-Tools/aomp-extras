#!/bin/bash
#
#  openmpi_set_cu_mask: Script that reads OpenMPI environment variables and
#                       builds ROCR_GLOBAL_CU_MASK accordingly. THis script is to
#                       demonstrate how to distribute a GPU across multiple
#                       ranks of an MPI job.
#
#  Limitations:
#  - Only works with AOMP with patched rocr runtume to support ROCR_GLOBAL_CU_MASK
#  - Only works with GPUs that have 60 CUs
#  - Only works when number of local MPI processes is a multiple of 60
#  - Only works with OpenMPI because OpenMPI sets certain environment variables
#
#  Example Usage:
#  mpirun -np 4 /usr/lib/aomp/bin/openmpi_set_cu_mask <MPI_APP_BINARY> <MPI_APP_ARGS>
#  mpirun -np 6 /usr/lib/aomp/bin/openmpi_set_cu_mask
#
#  Written by Greg Rodgers 

PROGVERSION=X.Y-Z
function version(){
   echo $0 version $PROGVERSION
   exit 0
}
[ "$1" == "--version" ] && version

#  Get environment variables set by OpenMPI
_num_local_procs=$OMPI_COMM_WORLD_LOCAL_SIZE
_local_proc_num=$OMPI_COMM_WORLD_LOCAL_RANK
if [ -z "$_num_local_procs" ] ; then 
   echo "ERROR: $0 is intended to be run with OpenMPI (mpirun)"
   exit 1
fi

AOMP=${AOMP:-_AOMP_INSTALL_DIR_}
if [ ! -d $AOMP ] ; then
   AOMP="_AOMP_INSTALL_DIR_"
fi
if [ ! -d $AOMP ] ; then
   echo "ERROR: AOMP not found at $AOMP"
   echo "       Please install AOMP or correctly set env-var AOMP"
   exit 1
fi
if [ ! -f $AOMP/bin/rocminfo ] ; then
   echo "ERROR: Could not find binary $AOMP/bin/rocminfo"
   echo "       Please correct the installation of AOMP"
   exit 1
fi
# Assume the number of GPU cus is maximum CU count of all agents 
_number_of_CUs=0
for last_cu_count in `$AOMP/bin/rocminfo | grep "Compute Unit:" | cut -d":" -f2` ; do
   if [[ ( $last_cu_count > $_number_of_CUs ) ]] ; then 
      _number_of_CUs=$last_cu_count
   fi
done

#  This script is only tested with number of CUs == 60
_rem=$(($_number_of_CUs%4))
if [ $_rem != 0 ] ; then
   echo "ERROR:  currently only support GPUs where number of CUs is divisible by 4"
   echo "        This GPU has $_number_of_CUs CUs"
fi

# This script is only tested where CUs can be divided evenly across MPI ranks
_rem=$(($_number_of_CUs%_num_local_procs))
if [ $_rem != 0 ] ; then
   echo "ERROR: The number of CUs ($_number_of_CUs) can not be divided by $_num_local_procs"
   exit 1
fi

#  Calculate the CU mask
_bits_to_set=$(($_number_of_CUs/$_num_local_procs))
_bits_to_shift=$(($_local_proc_num * $_bits_to_set))
# use bc because these values can be very large
_unshifted_bits=`echo "(2 ^ $_bits_to_set) - 1" | bc`
_mask=`echo "obase=16; $_unshifted_bits * (2 ^ $_bits_to_shift)" | bc`
# Calculate the number of leading zeros needed for tis mask
_lz=$(( ( $_number_of_CUs / 4 ) - ${#_mask} ))
for i in `seq 1 $_lz` ; do
    _mask="0$_mask"
done
_mask="0x$_mask"

echo "ROCR_GLOBAL_CU_MASK:$_mask proc_num:$_local_proc_num "
export ROCR_GLOBAL_CU_MASK=$_mask

# execute the application
$*
exit $?
